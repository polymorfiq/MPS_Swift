package Swift.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myVariableDecl__BehaviorDescriptor = new VariableDecl__BehaviorDescriptor();
  private final BHDescriptor myConstantDecl__BehaviorDescriptor = new ConstantDecl__BehaviorDescriptor();
  private final BHDescriptor myInt__BehaviorDescriptor = new Int__BehaviorDescriptor();
  private final BHDescriptor myFloatValue__BehaviorDescriptor = new FloatValue__BehaviorDescriptor();
  private final BHDescriptor myUInt__BehaviorDescriptor = new UInt__BehaviorDescriptor();
  private final BHDescriptor myDoubleValue__BehaviorDescriptor = new DoubleValue__BehaviorDescriptor();
  private final BHDescriptor myMinusUnaryOp__BehaviorDescriptor = new MinusUnaryOp__BehaviorDescriptor();
  private final BHDescriptor myPlusUnaryOp__BehaviorDescriptor = new PlusUnaryOp__BehaviorDescriptor();
  private final BHDescriptor myOneSidedRangeOp__BehaviorDescriptor = new OneSidedRangeOp__BehaviorDescriptor();
  private final BHDescriptor myOneSidedHalfOpenRange__BehaviorDescriptor = new OneSidedHalfOpenRange__BehaviorDescriptor();
  private final BHDescriptor myStringRawText__BehaviorDescriptor = new StringRawText__BehaviorDescriptor();
  private final BHDescriptor myInterpolatableString__BehaviorDescriptor = new InterpolatableString__BehaviorDescriptor();
  private final BHDescriptor myLogicalNotOp__BehaviorDescriptor = new LogicalNotOp__BehaviorDescriptor();
  private final BHDescriptor myPointwiseLogicalNotOp__BehaviorDescriptor = new PointwiseLogicalNotOp__BehaviorDescriptor();
  private final BHDescriptor myOneSideRangePostfixOp__BehaviorDescriptor = new OneSideRangePostfixOp__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myConstantDecl__BehaviorDescriptor;
      case 1:
        return myDoubleValue__BehaviorDescriptor;
      case 2:
        return myFloatValue__BehaviorDescriptor;
      case 3:
        return myInt__BehaviorDescriptor;
      case 4:
        return myInterpolatableString__BehaviorDescriptor;
      case 5:
        return myLogicalNotOp__BehaviorDescriptor;
      case 6:
        return myMinusUnaryOp__BehaviorDescriptor;
      case 7:
        return myOneSideRangePostfixOp__BehaviorDescriptor;
      case 8:
        return myOneSidedHalfOpenRange__BehaviorDescriptor;
      case 9:
        return myOneSidedRangeOp__BehaviorDescriptor;
      case 10:
        return myPlusUnaryOp__BehaviorDescriptor;
      case 11:
        return myPointwiseLogicalNotOp__BehaviorDescriptor;
      case 12:
        return myStringRawText__BehaviorDescriptor;
      case 13:
        return myUInt__BehaviorDescriptor;
      case 14:
        return myVariableDecl__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9bL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42a73dc5L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4275d3c4L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f858L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f90e8676L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f9321f35L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8eff5c6L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f9324551L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8fdc709L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8fda3dcL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f02061L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f93241b4L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f90160e4L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4282298fL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9aL)).seal();
}
