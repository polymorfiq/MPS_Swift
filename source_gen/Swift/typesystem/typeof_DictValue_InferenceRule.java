package Swift.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_DictValue_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_DictValue_InferenceRule() {
  }
  public void applyRule(final SNode dictValue, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (ListSequence.fromList(SLinkOperations.getChildren(dictValue, LINKS.key_values$v9E9)).count() > 0) {
      {
        final SNode keyValType = typeCheckingContext.typeOf(ListSequence.fromList(SLinkOperations.getChildren(dictValue, LINKS.key_values$v9E9)).getElement(0), "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859069370406", true);
        typeCheckingContext.whenConcrete(keyValType, () -> {
          SNode dictKeyVal = SNodeOperations.as(typeCheckingContext.getExpandedNode(keyValType), CONCEPTS.DictionaryKeyValue$Xn);
          SNode dictType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f95f01b9L, "Swift.structure.Dictionary"));
          SLinkOperations.setTarget(dictType, LINKS.keyType$jQH, SLinkOperations.getTarget(dictKeyVal, LINKS.keyType$3XRe));
          SLinkOperations.setTarget(dictType, LINKS.valType$kkJ, SLinkOperations.getTarget(dictKeyVal, LINKS.valType$3Ylg));
          {
            SNode _nodeToCheck_1029348928467 = dictValue;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859069412737", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859069410040", true), (SNode) typeCheckingContext.typeOf(dictType, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859069412917", true), _info_12389875345);
          }
        }, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859069370381", false, false);
      }

      for (int i = 0; i < ListSequence.fromList(SLinkOperations.getChildren(dictValue, LINKS.key_values$v9E9)).count() - 1; i++) {
        {
          SNode _nodeToCheck_1029348928467 = ListSequence.fromList(SLinkOperations.getChildren(dictValue, LINKS.key_values$v9E9)).getElement(i + 1);
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859069370415", 0, null);
          typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859069370424", true), (SNode) typeCheckingContext.typeOf(ListSequence.fromList(SLinkOperations.getChildren(dictValue, LINKS.key_values$v9E9)).getElement(i), "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859069370417", true), false, false, _info_12389875345);
        }
      }
    } else {
      {
        SNode _nodeToCheck_1029348928467 = dictValue;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859069370455", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859069370461", true), (SNode) SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f96bb6eaL, "Swift.structure.ArrayEmpty")), _info_12389875345);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.DictValue$8i;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink key_values$v9E9 = MetaAdapterFactory.getContainmentLink(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f965b9e6L, 0x28a3a9c7f965b9efL, "key_values");
    /*package*/ static final SContainmentLink keyType$jQH = MetaAdapterFactory.getContainmentLink(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f95f01b9L, 0x28a3a9c7f95f01bbL, "keyType");
    /*package*/ static final SContainmentLink keyType$3XRe = MetaAdapterFactory.getContainmentLink(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f9726f00L, 0x28a3a9c7f9726f03L, "keyType");
    /*package*/ static final SContainmentLink valType$kkJ = MetaAdapterFactory.getContainmentLink(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f95f01b9L, 0x28a3a9c7f95f01bdL, "valType");
    /*package*/ static final SContainmentLink valType$3Ylg = MetaAdapterFactory.getContainmentLink(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f9726f00L, 0x28a3a9c7f9726f05L, "valType");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DictionaryKeyValue$Xn = MetaAdapterFactory.getConcept(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f9726f00L, "Swift.structure.DictionaryKeyValue");
    /*package*/ static final SConcept DictValue$8i = MetaAdapterFactory.getConcept(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f965b9e6L, "Swift.structure.DictValue");
  }
}
