package Swift.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_Assignment_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_Assignment_InferenceRule() {
  }
  public void applyRule(final SNode assignment, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (!(typeCheckingContext.isSingleTypeComputation())) {
      {
        SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(assignment, LINKS.assignment$EwX8);
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, "Assignment to an incompatible type", "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "175470559285036437", 0, null);
        typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "175470559285036440", true), (SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(assignment, LINKS.assignee$YL1w), "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "175470559285036445", true), true, true, _info_12389875345);
      }
    }

    {
      final SNode assigneeType = typeCheckingContext.typeOf(SLinkOperations.getTarget(assignment, LINKS.assignee$YL1w), "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859057577635", true);
      typeCheckingContext.whenConcrete(assigneeType, () -> {
        if ((typeCheckingContext.getExpandedNode(assigneeType) == null)) {
          {
            SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(assignment, LINKS.assignee$YL1w);
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, "Incompatible assignment type (unknown assignee type)", "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859059378893", 0, null);
            typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859059378901", true), (SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(assignment, LINKS.assignment$EwX8), "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859059378896", true), false, true, _info_12389875345);
          }
        }
      }, "r:0c6516bc-67ad-43d0-9e62-91eb10f7a8b8(Swift.typesystem)", "2928370859057577589", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Assignment$Cl;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink assignment$EwX8 = MetaAdapterFactory.getContainmentLink(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL, 0x26f658b425f39ddL, "assignment");
    /*package*/ static final SContainmentLink assignee$YL1w = MetaAdapterFactory.getContainmentLink(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL, 0x26f658b4262005dL, "assignee");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Assignment$Cl = MetaAdapterFactory.getConcept(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL, "Swift.structure.Assignment");
  }
}
