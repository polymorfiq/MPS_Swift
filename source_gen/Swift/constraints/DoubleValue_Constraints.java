package Swift.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class DoubleValue_Constraints extends BaseConstraintsDescriptor {
  public DoubleValue_Constraints() {
    super(CONCEPTS.DoubleValue$9U);
  }

  public static class BeforeDecimal_Property extends BasePropertyConstraintsDescriptor {
    public BeforeDecimal_Property(ConstraintsDescriptor container) {
      super(PROPS.beforeDecimal$xjOV, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:cadaf8f5-bf2c-4eea-8e82-c1c814da96ef(Swift.constraints)", "175470559283880089"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      return propertyValue.matches("-?[0-9]+");
    }
  }
  public static class AfterDecimal_Property extends BasePropertyConstraintsDescriptor {
    public AfterDecimal_Property(ConstraintsDescriptor container) {
      super(PROPS.afterDecimal$xk3W, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:cadaf8f5-bf2c-4eea-8e82-c1c814da96ef(Swift.constraints)", "175470559283880097"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      return propertyValue.matches("[0-9]+");
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.beforeDecimal$xjOV, new BeforeDecimal_Property(this));
    properties.put(PROPS.afterDecimal$xk3W, new AfterDecimal_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DoubleValue$9U = MetaAdapterFactory.getConcept(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42a73dc5L, "Swift.structure.DoubleValue");
  }

  private static final class PROPS {
    /*package*/ static final SProperty beforeDecimal$xjOV = MetaAdapterFactory.getProperty(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42a73dc5L, 0x26f658b42a79c95L, "beforeDecimal");
    /*package*/ static final SProperty afterDecimal$xk3W = MetaAdapterFactory.getProperty(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42a73dc5L, 0x26f658b42a79c96L, "afterDecimal");
  }
}
