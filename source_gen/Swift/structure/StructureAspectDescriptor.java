package Swift.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAddAssignOp = createDescriptorForAddAssignOp();
  /*package*/ final ConceptDescriptor myConceptAddOverflowAssignOp = createDescriptorForAddOverflowAssignOp();
  /*package*/ final ConceptDescriptor myConceptAdditionOp = createDescriptorForAdditionOp();
  /*package*/ final ConceptDescriptor myConceptArray = createDescriptorForArray();
  /*package*/ final ConceptDescriptor myConceptArrayEmpty = createDescriptorForArrayEmpty();
  /*package*/ final ConceptDescriptor myConceptArrayValue = createDescriptorForArrayValue();
  /*package*/ final ConceptDescriptor myConceptAssignable = createDescriptorForAssignable();
  /*package*/ final ConceptDescriptor myConceptAssignmentOp = createDescriptorForAssignmentOp();
  /*package*/ final ConceptDescriptor myConceptBinaryOperator = createDescriptorForBinaryOperator();
  /*package*/ final ConceptDescriptor myConceptBitwiseAndAssignOp = createDescriptorForBitwiseAndAssignOp();
  /*package*/ final ConceptDescriptor myConceptBitwiseNotOp = createDescriptorForBitwiseNotOp();
  /*package*/ final ConceptDescriptor myConceptBitwiseOrAssignOp = createDescriptorForBitwiseOrAssignOp();
  /*package*/ final ConceptDescriptor myConceptBitwiseXorAssignOp = createDescriptorForBitwiseXorAssignOp();
  /*package*/ final ConceptDescriptor myConceptBool = createDescriptorForBool();
  /*package*/ final ConceptDescriptor myConceptBoolValue = createDescriptorForBoolValue();
  /*package*/ final ConceptDescriptor myConceptCommentMultiLine = createDescriptorForCommentMultiLine();
  /*package*/ final ConceptDescriptor myConceptCommentMultilineLine = createDescriptorForCommentMultilineLine();
  /*package*/ final ConceptDescriptor myConceptCommentSingleLine = createDescriptorForCommentSingleLine();
  /*package*/ final ConceptDescriptor myConceptComparisonOperator = createDescriptorForComparisonOperator();
  /*package*/ final ConceptDescriptor myConceptConstantDecl = createDescriptorForConstantDecl();
  /*package*/ final ConceptDescriptor myConceptDictKeyValue = createDescriptorForDictKeyValue();
  /*package*/ final ConceptDescriptor myConceptDictValue = createDescriptorForDictValue();
  /*package*/ final ConceptDescriptor myConceptDictionary = createDescriptorForDictionary();
  /*package*/ final ConceptDescriptor myConceptDictionaryEmpty = createDescriptorForDictionaryEmpty();
  /*package*/ final ConceptDescriptor myConceptDictionaryKeyValue = createDescriptorForDictionaryKeyValue();
  /*package*/ final ConceptDescriptor myConceptDivideAssignOp = createDescriptorForDivideAssignOp();
  /*package*/ final ConceptDescriptor myConceptDivisionOp = createDescriptorForDivisionOp();
  /*package*/ final ConceptDescriptor myConceptDouble = createDescriptorForDouble();
  /*package*/ final ConceptDescriptor myConceptDoubleValue = createDescriptorForDoubleValue();
  /*package*/ final ConceptDescriptor myConceptEmptyStatement = createDescriptorForEmptyStatement();
  /*package*/ final ConceptDescriptor myConceptEqualToOp = createDescriptorForEqualToOp();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptFalseValue = createDescriptorForFalseValue();
  /*package*/ final ConceptDescriptor myConceptFloat = createDescriptorForFloat();
  /*package*/ final ConceptDescriptor myConceptFloatValue = createDescriptorForFloatValue();
  /*package*/ final ConceptDescriptor myConceptGreaterThanOp = createDescriptorForGreaterThanOp();
  /*package*/ final ConceptDescriptor myConceptGreaterThanOrEqualOp = createDescriptorForGreaterThanOrEqualOp();
  /*package*/ final ConceptDescriptor myConceptHalfOpenRangeOp = createDescriptorForHalfOpenRangeOp();
  /*package*/ final ConceptDescriptor myConceptImplicitlyUnwrappedOptional = createDescriptorForImplicitlyUnwrappedOptional();
  /*package*/ final ConceptDescriptor myConceptInt = createDescriptorForInt();
  /*package*/ final ConceptDescriptor myConceptIntValue = createDescriptorForIntValue();
  /*package*/ final ConceptDescriptor myConceptInterpolatableString = createDescriptorForInterpolatableString();
  /*package*/ final ConceptDescriptor myConceptLeftBitShiftAssignOp = createDescriptorForLeftBitShiftAssignOp();
  /*package*/ final ConceptDescriptor myConceptLeftBitShiftIgnoreOverflowAssignOp = createDescriptorForLeftBitShiftIgnoreOverflowAssignOp();
  /*package*/ final ConceptDescriptor myConceptLessThanOp = createDescriptorForLessThanOp();
  /*package*/ final ConceptDescriptor myConceptLessThanOrEqualTo = createDescriptorForLessThanOrEqualTo();
  /*package*/ final ConceptDescriptor myConceptLiteralValue = createDescriptorForLiteralValue();
  /*package*/ final ConceptDescriptor myConceptLogcalAndOp = createDescriptorForLogcalAndOp();
  /*package*/ final ConceptDescriptor myConceptLogicalNotOp = createDescriptorForLogicalNotOp();
  /*package*/ final ConceptDescriptor myConceptLogicalOrOp = createDescriptorForLogicalOrOp();
  /*package*/ final ConceptDescriptor myConceptMinusUnaryOp = createDescriptorForMinusUnaryOp();
  /*package*/ final ConceptDescriptor myConceptModule = createDescriptorForModule();
  /*package*/ final ConceptDescriptor myConceptMultilineStringValue = createDescriptorForMultilineStringValue();
  /*package*/ final ConceptDescriptor myConceptMultiplicationOp = createDescriptorForMultiplicationOp();
  /*package*/ final ConceptDescriptor myConceptMultiplyAssignOp = createDescriptorForMultiplyAssignOp();
  /*package*/ final ConceptDescriptor myConceptMultiplyOverflowAssignOp = createDescriptorForMultiplyOverflowAssignOp();
  /*package*/ final ConceptDescriptor myConceptNameValuePair = createDescriptorForNameValuePair();
  /*package*/ final ConceptDescriptor myConceptNamedEntityDecl = createDescriptorForNamedEntityDecl();
  /*package*/ final ConceptDescriptor myConceptNil = createDescriptorForNil();
  /*package*/ final ConceptDescriptor myConceptNilCoalescingOp = createDescriptorForNilCoalescingOp();
  /*package*/ final ConceptDescriptor myConceptNilValue = createDescriptorForNilValue();
  /*package*/ final ConceptDescriptor myConceptNotEqualToOp = createDescriptorForNotEqualToOp();
  /*package*/ final ConceptDescriptor myConceptOneSideRangePostfixOp = createDescriptorForOneSideRangePostfixOp();
  /*package*/ final ConceptDescriptor myConceptOneSidedHalfOpenRange = createDescriptorForOneSidedHalfOpenRange();
  /*package*/ final ConceptDescriptor myConceptOneSidedRangeOp = createDescriptorForOneSidedRangeOp();
  /*package*/ final ConceptDescriptor myConceptOperator = createDescriptorForOperator();
  /*package*/ final ConceptDescriptor myConceptOptional = createDescriptorForOptional();
  /*package*/ final ConceptDescriptor myConceptPlusUnaryOp = createDescriptorForPlusUnaryOp();
  /*package*/ final ConceptDescriptor myConceptPointwiseBitwiseAndAssignOp = createDescriptorForPointwiseBitwiseAndAssignOp();
  /*package*/ final ConceptDescriptor myConceptPointwiseBitwiseOrAssignOp = createDescriptorForPointwiseBitwiseOrAssignOp();
  /*package*/ final ConceptDescriptor myConceptPointwiseBitwiseXorAssignOp = createDescriptorForPointwiseBitwiseXorAssignOp();
  /*package*/ final ConceptDescriptor myConceptPointwiseLogicalNotOp = createDescriptorForPointwiseLogicalNotOp();
  /*package*/ final ConceptDescriptor myConceptRangeOp = createDescriptorForRangeOp();
  /*package*/ final ConceptDescriptor myConceptRemainderAssignOp = createDescriptorForRemainderAssignOp();
  /*package*/ final ConceptDescriptor myConceptRemainderOp = createDescriptorForRemainderOp();
  /*package*/ final ConceptDescriptor myConceptRightBitShiftAssignOp = createDescriptorForRightBitShiftAssignOp();
  /*package*/ final ConceptDescriptor myConceptRightBitShiftIgnoreOverflowAssignOp = createDescriptorForRightBitShiftIgnoreOverflowAssignOp();
  /*package*/ final ConceptDescriptor myConceptSet = createDescriptorForSet();
  /*package*/ final ConceptDescriptor myConceptStatement = createDescriptorForStatement();
  /*package*/ final ConceptDescriptor myConceptString = createDescriptorForString();
  /*package*/ final ConceptDescriptor myConceptStringInterpolatedExpression = createDescriptorForStringInterpolatedExpression();
  /*package*/ final ConceptDescriptor myConceptStringRawText = createDescriptorForStringRawText();
  /*package*/ final ConceptDescriptor myConceptStringValue = createDescriptorForStringValue();
  /*package*/ final ConceptDescriptor myConceptStringable = createDescriptorForStringable();
  /*package*/ final ConceptDescriptor myConceptSubtractAssignOp = createDescriptorForSubtractAssignOp();
  /*package*/ final ConceptDescriptor myConceptSubtractOverflowAssignOp = createDescriptorForSubtractOverflowAssignOp();
  /*package*/ final ConceptDescriptor myConceptSubtractionOp = createDescriptorForSubtractionOp();
  /*package*/ final ConceptDescriptor myConceptTernaryConditionalOp = createDescriptorForTernaryConditionalOp();
  /*package*/ final ConceptDescriptor myConceptTernaryOperator = createDescriptorForTernaryOperator();
  /*package*/ final ConceptDescriptor myConceptTrueValue = createDescriptorForTrueValue();
  /*package*/ final ConceptDescriptor myConceptTuple = createDescriptorForTuple();
  /*package*/ final ConceptDescriptor myConceptTupleValue = createDescriptorForTupleValue();
  /*package*/ final ConceptDescriptor myConceptTypable = createDescriptorForTypable();
  /*package*/ final ConceptDescriptor myConceptType = createDescriptorForType();
  /*package*/ final ConceptDescriptor myConceptTypeAlias = createDescriptorForTypeAlias();
  /*package*/ final ConceptDescriptor myConceptTypealiasDecl = createDescriptorForTypealiasDecl();
  /*package*/ final ConceptDescriptor myConceptUInt = createDescriptorForUInt();
  /*package*/ final ConceptDescriptor myConceptUIntValue = createDescriptorForUIntValue();
  /*package*/ final ConceptDescriptor myConceptUnaryOperator = createDescriptorForUnaryOperator();
  /*package*/ final ConceptDescriptor myConceptVariable = createDescriptorForVariable();
  /*package*/ final ConceptDescriptor myConceptVariableDecl = createDescriptorForVariableDecl();
  /*package*/ final ConceptDescriptor myConceptVariableReference = createDescriptorForVariableReference();
  /*package*/ final EnumerationDescriptor myEnumerationIntSize = new EnumerationDescriptor_IntSize();
  /*package*/ final EnumerationDescriptor myEnumerationUnaryPosition = new EnumerationDescriptor_UnaryPosition();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAddAssignOp, myConceptAddOverflowAssignOp, myConceptAdditionOp, myConceptArray, myConceptArrayEmpty, myConceptArrayValue, myConceptAssignable, myConceptAssignmentOp, myConceptBinaryOperator, myConceptBitwiseAndAssignOp, myConceptBitwiseNotOp, myConceptBitwiseOrAssignOp, myConceptBitwiseXorAssignOp, myConceptBool, myConceptBoolValue, myConceptCommentMultiLine, myConceptCommentMultilineLine, myConceptCommentSingleLine, myConceptComparisonOperator, myConceptConstantDecl, myConceptDictKeyValue, myConceptDictValue, myConceptDictionary, myConceptDictionaryEmpty, myConceptDictionaryKeyValue, myConceptDivideAssignOp, myConceptDivisionOp, myConceptDouble, myConceptDoubleValue, myConceptEmptyStatement, myConceptEqualToOp, myConceptExpression, myConceptFalseValue, myConceptFloat, myConceptFloatValue, myConceptGreaterThanOp, myConceptGreaterThanOrEqualOp, myConceptHalfOpenRangeOp, myConceptImplicitlyUnwrappedOptional, myConceptInt, myConceptIntValue, myConceptInterpolatableString, myConceptLeftBitShiftAssignOp, myConceptLeftBitShiftIgnoreOverflowAssignOp, myConceptLessThanOp, myConceptLessThanOrEqualTo, myConceptLiteralValue, myConceptLogcalAndOp, myConceptLogicalNotOp, myConceptLogicalOrOp, myConceptMinusUnaryOp, myConceptModule, myConceptMultilineStringValue, myConceptMultiplicationOp, myConceptMultiplyAssignOp, myConceptMultiplyOverflowAssignOp, myConceptNameValuePair, myConceptNamedEntityDecl, myConceptNil, myConceptNilCoalescingOp, myConceptNilValue, myConceptNotEqualToOp, myConceptOneSideRangePostfixOp, myConceptOneSidedHalfOpenRange, myConceptOneSidedRangeOp, myConceptOperator, myConceptOptional, myConceptPlusUnaryOp, myConceptPointwiseBitwiseAndAssignOp, myConceptPointwiseBitwiseOrAssignOp, myConceptPointwiseBitwiseXorAssignOp, myConceptPointwiseLogicalNotOp, myConceptRangeOp, myConceptRemainderAssignOp, myConceptRemainderOp, myConceptRightBitShiftAssignOp, myConceptRightBitShiftIgnoreOverflowAssignOp, myConceptSet, myConceptStatement, myConceptString, myConceptStringInterpolatedExpression, myConceptStringRawText, myConceptStringValue, myConceptStringable, myConceptSubtractAssignOp, myConceptSubtractOverflowAssignOp, myConceptSubtractionOp, myConceptTernaryConditionalOp, myConceptTernaryOperator, myConceptTrueValue, myConceptTuple, myConceptTupleValue, myConceptTypable, myConceptType, myConceptTypeAlias, myConceptTypealiasDecl, myConceptUInt, myConceptUIntValue, myConceptUnaryOperator, myConceptVariable, myConceptVariableDecl, myConceptVariableReference);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AddAssignOp:
        return myConceptAddAssignOp;
      case LanguageConceptSwitch.AddOverflowAssignOp:
        return myConceptAddOverflowAssignOp;
      case LanguageConceptSwitch.AdditionOp:
        return myConceptAdditionOp;
      case LanguageConceptSwitch.Array:
        return myConceptArray;
      case LanguageConceptSwitch.ArrayEmpty:
        return myConceptArrayEmpty;
      case LanguageConceptSwitch.ArrayValue:
        return myConceptArrayValue;
      case LanguageConceptSwitch.Assignable:
        return myConceptAssignable;
      case LanguageConceptSwitch.AssignmentOp:
        return myConceptAssignmentOp;
      case LanguageConceptSwitch.BinaryOperator:
        return myConceptBinaryOperator;
      case LanguageConceptSwitch.BitwiseAndAssignOp:
        return myConceptBitwiseAndAssignOp;
      case LanguageConceptSwitch.BitwiseNotOp:
        return myConceptBitwiseNotOp;
      case LanguageConceptSwitch.BitwiseOrAssignOp:
        return myConceptBitwiseOrAssignOp;
      case LanguageConceptSwitch.BitwiseXorAssignOp:
        return myConceptBitwiseXorAssignOp;
      case LanguageConceptSwitch.Bool:
        return myConceptBool;
      case LanguageConceptSwitch.BoolValue:
        return myConceptBoolValue;
      case LanguageConceptSwitch.CommentMultiLine:
        return myConceptCommentMultiLine;
      case LanguageConceptSwitch.CommentMultilineLine:
        return myConceptCommentMultilineLine;
      case LanguageConceptSwitch.CommentSingleLine:
        return myConceptCommentSingleLine;
      case LanguageConceptSwitch.ComparisonOperator:
        return myConceptComparisonOperator;
      case LanguageConceptSwitch.ConstantDecl:
        return myConceptConstantDecl;
      case LanguageConceptSwitch.DictKeyValue:
        return myConceptDictKeyValue;
      case LanguageConceptSwitch.DictValue:
        return myConceptDictValue;
      case LanguageConceptSwitch.Dictionary:
        return myConceptDictionary;
      case LanguageConceptSwitch.DictionaryEmpty:
        return myConceptDictionaryEmpty;
      case LanguageConceptSwitch.DictionaryKeyValue:
        return myConceptDictionaryKeyValue;
      case LanguageConceptSwitch.DivideAssignOp:
        return myConceptDivideAssignOp;
      case LanguageConceptSwitch.DivisionOp:
        return myConceptDivisionOp;
      case LanguageConceptSwitch.Double:
        return myConceptDouble;
      case LanguageConceptSwitch.DoubleValue:
        return myConceptDoubleValue;
      case LanguageConceptSwitch.EmptyStatement:
        return myConceptEmptyStatement;
      case LanguageConceptSwitch.EqualToOp:
        return myConceptEqualToOp;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.FalseValue:
        return myConceptFalseValue;
      case LanguageConceptSwitch.Float:
        return myConceptFloat;
      case LanguageConceptSwitch.FloatValue:
        return myConceptFloatValue;
      case LanguageConceptSwitch.GreaterThanOp:
        return myConceptGreaterThanOp;
      case LanguageConceptSwitch.GreaterThanOrEqualOp:
        return myConceptGreaterThanOrEqualOp;
      case LanguageConceptSwitch.HalfOpenRangeOp:
        return myConceptHalfOpenRangeOp;
      case LanguageConceptSwitch.ImplicitlyUnwrappedOptional:
        return myConceptImplicitlyUnwrappedOptional;
      case LanguageConceptSwitch.Int:
        return myConceptInt;
      case LanguageConceptSwitch.IntValue:
        return myConceptIntValue;
      case LanguageConceptSwitch.InterpolatableString:
        return myConceptInterpolatableString;
      case LanguageConceptSwitch.LeftBitShiftAssignOp:
        return myConceptLeftBitShiftAssignOp;
      case LanguageConceptSwitch.LeftBitShiftIgnoreOverflowAssignOp:
        return myConceptLeftBitShiftIgnoreOverflowAssignOp;
      case LanguageConceptSwitch.LessThanOp:
        return myConceptLessThanOp;
      case LanguageConceptSwitch.LessThanOrEqualTo:
        return myConceptLessThanOrEqualTo;
      case LanguageConceptSwitch.LiteralValue:
        return myConceptLiteralValue;
      case LanguageConceptSwitch.LogcalAndOp:
        return myConceptLogcalAndOp;
      case LanguageConceptSwitch.LogicalNotOp:
        return myConceptLogicalNotOp;
      case LanguageConceptSwitch.LogicalOrOp:
        return myConceptLogicalOrOp;
      case LanguageConceptSwitch.MinusUnaryOp:
        return myConceptMinusUnaryOp;
      case LanguageConceptSwitch.Module:
        return myConceptModule;
      case LanguageConceptSwitch.MultilineStringValue:
        return myConceptMultilineStringValue;
      case LanguageConceptSwitch.MultiplicationOp:
        return myConceptMultiplicationOp;
      case LanguageConceptSwitch.MultiplyAssignOp:
        return myConceptMultiplyAssignOp;
      case LanguageConceptSwitch.MultiplyOverflowAssignOp:
        return myConceptMultiplyOverflowAssignOp;
      case LanguageConceptSwitch.NameValuePair:
        return myConceptNameValuePair;
      case LanguageConceptSwitch.NamedEntityDecl:
        return myConceptNamedEntityDecl;
      case LanguageConceptSwitch.Nil:
        return myConceptNil;
      case LanguageConceptSwitch.NilCoalescingOp:
        return myConceptNilCoalescingOp;
      case LanguageConceptSwitch.NilValue:
        return myConceptNilValue;
      case LanguageConceptSwitch.NotEqualToOp:
        return myConceptNotEqualToOp;
      case LanguageConceptSwitch.OneSideRangePostfixOp:
        return myConceptOneSideRangePostfixOp;
      case LanguageConceptSwitch.OneSidedHalfOpenRange:
        return myConceptOneSidedHalfOpenRange;
      case LanguageConceptSwitch.OneSidedRangeOp:
        return myConceptOneSidedRangeOp;
      case LanguageConceptSwitch.Operator:
        return myConceptOperator;
      case LanguageConceptSwitch.Optional:
        return myConceptOptional;
      case LanguageConceptSwitch.PlusUnaryOp:
        return myConceptPlusUnaryOp;
      case LanguageConceptSwitch.PointwiseBitwiseAndAssignOp:
        return myConceptPointwiseBitwiseAndAssignOp;
      case LanguageConceptSwitch.PointwiseBitwiseOrAssignOp:
        return myConceptPointwiseBitwiseOrAssignOp;
      case LanguageConceptSwitch.PointwiseBitwiseXorAssignOp:
        return myConceptPointwiseBitwiseXorAssignOp;
      case LanguageConceptSwitch.PointwiseLogicalNotOp:
        return myConceptPointwiseLogicalNotOp;
      case LanguageConceptSwitch.RangeOp:
        return myConceptRangeOp;
      case LanguageConceptSwitch.RemainderAssignOp:
        return myConceptRemainderAssignOp;
      case LanguageConceptSwitch.RemainderOp:
        return myConceptRemainderOp;
      case LanguageConceptSwitch.RightBitShiftAssignOp:
        return myConceptRightBitShiftAssignOp;
      case LanguageConceptSwitch.RightBitShiftIgnoreOverflowAssignOp:
        return myConceptRightBitShiftIgnoreOverflowAssignOp;
      case LanguageConceptSwitch.Set:
        return myConceptSet;
      case LanguageConceptSwitch.Statement:
        return myConceptStatement;
      case LanguageConceptSwitch.String:
        return myConceptString;
      case LanguageConceptSwitch.StringInterpolatedExpression:
        return myConceptStringInterpolatedExpression;
      case LanguageConceptSwitch.StringRawText:
        return myConceptStringRawText;
      case LanguageConceptSwitch.StringValue:
        return myConceptStringValue;
      case LanguageConceptSwitch.Stringable:
        return myConceptStringable;
      case LanguageConceptSwitch.SubtractAssignOp:
        return myConceptSubtractAssignOp;
      case LanguageConceptSwitch.SubtractOverflowAssignOp:
        return myConceptSubtractOverflowAssignOp;
      case LanguageConceptSwitch.SubtractionOp:
        return myConceptSubtractionOp;
      case LanguageConceptSwitch.TernaryConditionalOp:
        return myConceptTernaryConditionalOp;
      case LanguageConceptSwitch.TernaryOperator:
        return myConceptTernaryOperator;
      case LanguageConceptSwitch.TrueValue:
        return myConceptTrueValue;
      case LanguageConceptSwitch.Tuple:
        return myConceptTuple;
      case LanguageConceptSwitch.TupleValue:
        return myConceptTupleValue;
      case LanguageConceptSwitch.Typable:
        return myConceptTypable;
      case LanguageConceptSwitch.Type:
        return myConceptType;
      case LanguageConceptSwitch.TypeAlias:
        return myConceptTypeAlias;
      case LanguageConceptSwitch.TypealiasDecl:
        return myConceptTypealiasDecl;
      case LanguageConceptSwitch.UInt:
        return myConceptUInt;
      case LanguageConceptSwitch.UIntValue:
        return myConceptUIntValue;
      case LanguageConceptSwitch.UnaryOperator:
        return myConceptUnaryOperator;
      case LanguageConceptSwitch.Variable:
        return myConceptVariable;
      case LanguageConceptSwitch.VariableDecl:
        return myConceptVariableDecl;
      case LanguageConceptSwitch.VariableReference:
        return myConceptVariableReference;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationIntSize, myEnumerationUnaryPosition);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAddAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "AddAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f0453aL);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036346");
    b.version(3);
    b.alias("+=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAddOverflowAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "AddOverflowAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04558L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036376");
    b.version(3);
    b.alias("&+=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAdditionOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "AdditionOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8eff1c9L);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061014985");
    b.version(3);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArray() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Array", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f94ef200L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859067240960");
    b.version(3);
    b.aggregate("ofType", 0x28a3a9c7f94ef202L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L).optional(false).ordered(true).multiple(false).origin("2928370859067240962").done();
    b.alias("[");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArrayEmpty() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "ArrayEmpty", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f96bb6eaL);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859069126378");
    b.version(3);
    b.alias("[]");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArrayValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "ArrayValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f9625c0aL);
    b.class_(false, false, false);
    // extends: Swift.structure.LiteralValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca25L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859068513290");
    b.version(3);
    b.aggregate("values", 0x28a3a9c7f9625c0bL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(true).ordered(true).multiple(true).origin("2928370859068513291").done();
    b.alias("[");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssignable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Assignable", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39ceL);
    b.interface_();
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559279135182");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssignmentOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "AssignmentOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559279135178");
    b.version(3);
    b.alias("=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "BinaryOperator", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.class_(false, true, false);
    // extends: Swift.structure.Operator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbbL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859060273084");
    b.version(3);
    b.aggregate("left", 0x28a3a9c7f8e49fc5L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(false).ordered(true).multiple(false).origin("2928370859060273093").done();
    b.aggregate("right", 0x28a3a9c7f8e49fc7L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(false).ordered(true).multiple(false).origin("2928370859060273095").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBitwiseAndAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "BitwiseAndAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04548L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036360");
    b.version(3);
    b.alias("&=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBitwiseNotOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "BitwiseNotOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f932436eL);
    b.class_(false, false, false);
    // extends: Swift.structure.UnaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbeL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859065361262");
    b.version(3);
    b.alias("~");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBitwiseOrAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "BitwiseOrAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f0454cL);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036364");
    b.version(3);
    b.alias("|=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBitwiseXorAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "BitwiseXorAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f0454fL);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036367");
    b.version(3);
    b.alias("^=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBool() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Bool", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c091d9L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559285514713");
    b.version(3);
    b.alias("Bool");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBoolValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "BoolValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c3e42dL);
    b.class_(false, true, false);
    // extends: Swift.structure.LiteralValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca25L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559285732397");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCommentMultiLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "CommentMultiLine", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b427c2d3cL);
    b.class_(false, false, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dadL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559281032508");
    b.version(3);
    b.aggregate("lines", 0x26f658b427c2d67L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b427c2d63L).optional(false).ordered(true).multiple(true).origin("175470559281032551").done();
    b.alias("/*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCommentMultilineLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "CommentMultilineLine", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b427c2d63L);
    b.class_(false, false, false);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559281032547");
    b.version(3);
    b.property("comment", 0x26f658b427c2d64L).type(PrimitiveTypeId.STRING).origin("175470559281032548").done();
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCommentSingleLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "CommentSingleLine", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b427c2c6dL);
    b.class_(false, false, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dadL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559281032301");
    b.version(3);
    b.property("comment", 0x26f658b427c2c6fL).type(PrimitiveTypeId.STRING).origin("175470559281032303").done();
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForComparisonOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "ComparisonOperator", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41cf7L);
    b.class_(false, true, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061288183");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstantDecl() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "ConstantDecl", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9bL);
    b.class_(false, false, false);
    // extends: Swift.structure.NamedEntityDecl
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8bd7a87L);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dadL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559277325723");
    b.version(3);
    b.alias("let");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDictKeyValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "DictKeyValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f965b9e7L);
    b.class_(false, false, false);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859068733927");
    b.version(3);
    b.aggregate("key", 0x28a3a9c7f965b9e8L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(false).ordered(true).multiple(false).origin("2928370859068733928").done();
    b.aggregate("value", 0x28a3a9c7f965b9eaL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(false).ordered(true).multiple(false).origin("2928370859068733930").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDictValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "DictValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f965b9e6L);
    b.class_(false, false, false);
    // extends: Swift.structure.LiteralValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca25L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859068733926");
    b.version(3);
    b.aggregate("key_values", 0x28a3a9c7f965b9efL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f965b9e7L).optional(true).ordered(true).multiple(true).origin("2928370859068733935").done();
    b.alias("dict");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDictionary() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Dictionary", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f95f01b9L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859068293561");
    b.version(3);
    b.aggregate("keyType", 0x28a3a9c7f95f01bbL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L).optional(false).ordered(true).multiple(false).origin("2928370859068293563").done();
    b.aggregate("valType", 0x28a3a9c7f95f01bdL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L).optional(false).ordered(true).multiple(false).origin("2928370859068293565").done();
    b.alias("dict");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDictionaryEmpty() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "DictionaryEmpty", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f9705718L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859069429528");
    b.version(3);
    b.alias("[:]");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDictionaryKeyValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "DictionaryKeyValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f9726f00L);
    b.class_(false, false, false);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859069566720");
    b.version(3);
    b.aggregate("keyType", 0x28a3a9c7f9726f03L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L).optional(false).ordered(true).multiple(false).origin("2928370859069566723").done();
    b.aggregate("valType", 0x28a3a9c7f9726f05L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L).optional(false).ordered(true).multiple(false).origin("2928370859069566725").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivideAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "DivideAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04535L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036341");
    b.version(3);
    b.alias("/=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivisionOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "DivisionOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8eff5c2L);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061016002");
    b.version(3);
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDouble() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Double", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42a73dc2L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559283854786");
    b.version(3);
    b.alias("Double");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDoubleValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "DoubleValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42a73dc5L);
    b.class_(false, false, false);
    // extends: Swift.structure.LiteralValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca25L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559283854789");
    b.version(3);
    b.property("beforeDecimal", 0x26f658b42a79c95L).type(PrimitiveTypeId.STRING).origin("175470559283879061").done();
    b.property("afterDecimal", 0x26f658b42a79c96L).type(PrimitiveTypeId.STRING).origin("175470559283879062").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "EmptyStatement", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dbaL);
    b.class_(false, false, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dadL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559277325754");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEqualToOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "EqualToOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41cfcL);
    b.class_(false, false, false);
    // extends: Swift.structure.ComparisonOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41cf7L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061288188");
    b.version(3);
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Expression", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.interface_();
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559277325746");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFalseValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "FalseValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c10f35L);
    b.class_(false, false, false);
    // extends: Swift.structure.BoolValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c3e42dL);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559285546805");
    b.version(3);
    b.alias("false");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFloat() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Float", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4275d3f0L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559280616432");
    b.version(3);
    b.alias("Float");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFloatValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "FloatValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4275d3c4L);
    b.class_(false, false, false);
    // extends: Swift.structure.LiteralValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca25L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559280616388");
    b.version(3);
    b.property("beforeDecimal", 0x26f658b428c881eL).type(PrimitiveTypeId.STRING).origin("175470559282104350").done();
    b.property("afterDecimal", 0x26f658b428c8820L).type(PrimitiveTypeId.STRING).origin("175470559282104352").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "GreaterThanOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41d06L);
    b.class_(false, false, false);
    // extends: Swift.structure.ComparisonOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41cf7L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061288198");
    b.version(3);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanOrEqualOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "GreaterThanOrEqualOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41d0cL);
    b.class_(false, false, false);
    // extends: Swift.structure.ComparisonOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41cf7L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061288204");
    b.version(3);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHalfOpenRangeOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "HalfOpenRangeOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8fa1bfcL);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061681148");
    b.version(3);
    b.alias("..<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForImplicitlyUnwrappedOptional() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "ImplicitlyUnwrappedOptional", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8cf4ac0L);
    b.class_(false, false, false);
    // extends: Swift.structure.Optional
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42d47ee8L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859058875072");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInt() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Int", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f858L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559278725208");
    b.version(3);
    b.property("bits", 0x26f658b429450eaL).type(MetaIdFactory.dataTypeId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4292b53eL)).origin("175470559282614506").done();
    b.alias("Int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "IntValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4275d3b1L);
    b.class_(false, false, false);
    // extends: Swift.structure.LiteralValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca25L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559280616369");
    b.version(3);
    b.property("value", 0x26f658b4275d3bbL).type(PrimitiveTypeId.STRING).origin("175470559280616379").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInterpolatableString() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "InterpolatableString", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f90e8676L);
    b.class_(false, false, false);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859063019126");
    b.version(3);
    b.aggregate("contents", 0x28a3a9c7f90e8677L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f90160e7L).optional(false).ordered(true).multiple(true).origin("2928370859063019127").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLeftBitShiftAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "LeftBitShiftAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f0453fL);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036351");
    b.version(3);
    b.alias("<<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLeftBitShiftIgnoreOverflowAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "LeftBitShiftIgnoreOverflowAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04560L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036384");
    b.version(3);
    b.alias("&<<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThanOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "LessThanOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41d09L);
    b.class_(false, false, false);
    // extends: Swift.structure.ComparisonOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41cf7L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061288201");
    b.version(3);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThanOrEqualTo() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "LessThanOrEqualTo", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41d10L);
    b.class_(false, false, false);
    // extends: Swift.structure.ComparisonOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41cf7L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061288208");
    b.version(3);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLiteralValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "LiteralValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca25L);
    b.class_(false, true, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559279761957");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogcalAndOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "LogcalAndOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8fe1836L);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061942326");
    b.version(3);
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicalNotOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "LogicalNotOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f9321f35L);
    b.class_(false, false, false);
    // extends: Swift.structure.UnaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbeL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859065351989");
    b.version(3);
    b.alias("!");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicalOrOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "LogicalOrOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8fe1838L);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061942328");
    b.version(3);
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinusUnaryOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "MinusUnaryOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8eff5c6L);
    b.class_(false, false, false);
    // extends: Swift.structure.UnaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbeL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061016006");
    b.version(3);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Module", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dabL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559277325739");
    b.version(3);
    b.aggregate("body", 0x26f658b42439db8L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dadL).optional(true).ordered(true).multiple(true).origin("175470559277325752").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultilineStringValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "MultilineStringValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8fe6771L);
    b.class_(false, false, false);
    // extends: Swift.structure.LiteralValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca25L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061962609");
    b.version(3);
    b.aggregate("lines", 0x28a3a9c7f90b889dL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f90e8676L).optional(true).ordered(true).multiple(true).origin("2928370859062823069").done();
    b.alias("\"\"\"");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiplicationOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "MultiplicationOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8eff5bcL);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061015996");
    b.version(3);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiplyAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "MultiplyAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04531L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036337");
    b.version(3);
    b.alias("*=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiplyOverflowAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "MultiplyOverflowAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04553L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036371");
    b.version(3);
    b.alias("&*=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNameValuePair() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "NameValuePair", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42ce3c87L);
    b.class_(false, false, false);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559286410375");
    b.version(3);
    b.property("name", 0x26f658b42ce3c88L).type(PrimitiveTypeId.STRING).origin("175470559286410376").done();
    b.property("named", 0x26f658b42ce3c90L).type(PrimitiveTypeId.BOOLEAN).origin("175470559286410384").done();
    b.aggregate("value", 0x26f658b42ce3c8aL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(false).ordered(true).multiple(false).origin("175470559286410378").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNamedEntityDecl() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "NamedEntityDecl", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8bd7a87L);
    b.class_(false, true, false);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859057707655");
    b.version(3);
    b.property("has_initial_value", 0x28a3a9c7f8bd930bL).type(PrimitiveTypeId.BOOLEAN).origin("2928370859057713931").done();
    b.property("has_explicit_type", 0x28a3a9c7f8bd930cL).type(PrimitiveTypeId.BOOLEAN).origin("2928370859057713932").done();
    b.aggregate("variables", 0x28a3a9c7f8bd930fL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9cL).optional(false).ordered(true).multiple(true).origin("2928370859057713935").done();
    b.aggregate("initial_value", 0x28a3a9c7f8bd9310L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(true).ordered(true).multiple(false).origin("2928370859057713936").done();
    b.aggregate("explicit_type", 0x28a3a9c7f8bd9311L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L).optional(true).ordered(true).multiple(false).origin("2928370859057713937").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNil() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Nil", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42e28536L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559287739702");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNilCoalescingOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "NilCoalescingOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f9f86bL);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061672043");
    b.version(3);
    b.alias("??");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNilValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "NilValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42da5abaL);
    b.class_(false, false, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559287204538");
    b.version(3);
    b.alias("nil");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotEqualToOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "NotEqualToOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41d03L);
    b.class_(false, false, false);
    // extends: Swift.structure.ComparisonOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f41cf7L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061288195");
    b.version(3);
    b.alias("!=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOneSideRangePostfixOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "OneSideRangePostfixOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f9324551L);
    b.class_(false, false, false);
    // extends: Swift.structure.UnaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbeL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859065361745");
    b.version(3);
    b.alias("...");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOneSidedHalfOpenRange() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "OneSidedHalfOpenRange", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8fdc709L);
    b.class_(false, false, false);
    // extends: Swift.structure.UnaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbeL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061921545");
    b.version(3);
    b.alias("..<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOneSidedRangeOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "OneSidedRangeOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8fda3dcL);
    b.class_(false, false, false);
    // extends: Swift.structure.UnaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbeL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061912540");
    b.version(3);
    b.alias("...");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Operator", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbbL);
    b.class_(false, false, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dadL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859060273083");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOptional() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Optional", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42d47ee8L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559286820584");
    b.version(3);
    b.aggregate("ofType", 0x26f658b42d47ee9L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L).optional(false).ordered(true).multiple(false).origin("175470559286820585").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusUnaryOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "PlusUnaryOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f02061L);
    b.class_(false, false, false);
    // extends: Swift.structure.UnaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbeL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061026913");
    b.version(3);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPointwiseBitwiseAndAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "PointwiseBitwiseAndAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04567L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036391");
    b.version(3);
    b.alias(".&=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPointwiseBitwiseOrAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "PointwiseBitwiseOrAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f0456dL);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036397");
    b.version(3);
    b.alias(".|=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPointwiseBitwiseXorAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "PointwiseBitwiseXorAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04572L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036402");
    b.version(3);
    b.alias(".^=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPointwiseLogicalNotOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "PointwiseLogicalNotOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f93241b4L);
    b.class_(false, false, false);
    // extends: Swift.structure.UnaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbeL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859065360820");
    b.version(3);
    b.alias(".!");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRangeOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "RangeOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8fa0798L);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061675928");
    b.version(3);
    b.alias("...");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRemainderAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "RemainderAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04537L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036343");
    b.version(3);
    b.alias("%=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRemainderOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "RemainderOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8eff5c4L);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061016004");
    b.version(3);
    b.alias("%");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRightBitShiftAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "RightBitShiftAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04543L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036355");
    b.version(3);
    b.alias(">>=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRightBitShiftIgnoreOverflowAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "RightBitShiftIgnoreOverflowAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f04563L);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036387");
    b.version(3);
    b.alias("&>>=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Set", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f95b36a8L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859068044968");
    b.version(3);
    b.aggregate("ofType", 0x28a3a9c7f95b36c1L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L).optional(false).ordered(true).multiple(false).origin("2928370859068044993").done();
    b.alias("Set");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Statement", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dadL);
    b.interface_();
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559277325741");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForString() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "String", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425ed31cL);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559279108892");
    b.version(3);
    b.alias("String");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringInterpolatedExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "StringInterpolatedExpression", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f91dae5bL);
    b.class_(false, false, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f90160e7L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859064012379");
    b.version(3);
    b.aggregate("expression", 0x28a3a9c7f91dae5cL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(false).ordered(true).multiple(false).origin("2928370859064012380").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringRawText() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "StringRawText", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f90160e4L);
    b.class_(false, false, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f90160e7L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859062157540");
    b.version(3);
    b.property("content", 0x28a3a9c7f90160f1L).type(PrimitiveTypeId.STRING).origin("2928370859062157553").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "StringValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca21L);
    b.class_(false, false, false);
    // extends: Swift.structure.LiteralValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca25L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559279761953");
    b.version(3);
    b.property("extendedDelimiter", 0x28a3a9c7f92399ccL).type(PrimitiveTypeId.STRING).origin("2928370859064400332").done();
    b.aggregate("content", 0x28a3a9c7f90e867bL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f90e8676L).optional(false).ordered(true).multiple(false).origin("2928370859063019131").done();
    b.alias("\"");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Stringable", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f90160e7L);
    b.interface_();
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859062157543");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSubtractAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "SubtractAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f0453cL);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036348");
    b.version(3);
    b.alias("-=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSubtractOverflowAssignOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "SubtractOverflowAssignOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f0455cL);
    b.class_(false, false, false);
    // extends: Swift.structure.AssignmentOp
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061036380");
    b.version(3);
    b.alias("&-=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSubtractionOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "SubtractionOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8eff5b6L);
    b.class_(false, false, false);
    // extends: Swift.structure.BinaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbcL);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061015990");
    b.version(3);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTernaryConditionalOp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "TernaryConditionalOp", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8f43634L);
    b.class_(false, false, false);
    // extends: Swift.structure.TernaryOperator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbfL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859061294644");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTernaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "TernaryOperator", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbfL);
    b.class_(false, true, false);
    // extends: Swift.structure.Operator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbbL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859060273087");
    b.version(3);
    b.aggregate("first", 0x28a3a9c7f8f43636L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(false).ordered(true).multiple(false).origin("2928370859061294646").done();
    b.aggregate("second", 0x28a3a9c7f8f43638L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(false).ordered(true).multiple(false).origin("2928370859061294648").done();
    b.aggregate("third", 0x28a3a9c7f8f4363bL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(false).ordered(true).multiple(false).origin("2928370859061294651").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTrueValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "TrueValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c101a7L);
    b.class_(false, false, false);
    // extends: Swift.structure.BoolValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c3e42dL);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559285543335");
    b.version(3);
    b.alias("true");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTuple() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Tuple", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c47863L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559285770339");
    b.version(3);
    b.aggregate("types", 0x26f658b42c47875L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L).optional(true).ordered(true).multiple(true).origin("175470559285770357").done();
    b.alias("(");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTupleValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "TupleValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c47e49L);
    b.class_(false, false, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559285771849");
    b.version(3);
    b.aggregate("vals", 0x26f658b42c47e4eL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42ce3c87L).optional(true).ordered(true).multiple(true).origin("175470559285771854").done();
    b.alias("tuple");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Typable", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L);
    b.interface_();
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559278725209");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Type", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.class_(false, true, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f8a0774f2L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559278725240");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypeAlias() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "TypeAlias", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42b4e3b4L);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559284749236");
    b.version(3);
    b.aggregate("aliasFor", 0x26f658b42b4e3b7L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L).optional(false).ordered(true).multiple(false).origin("175470559284749239").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypealiasDecl() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "TypealiasDecl", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42baf701L);
    b.class_(false, false, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dadL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559285147393");
    b.version(3);
    b.aggregate("alias", 0x26f658b42baf706L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42b4e3b4L).optional(false).ordered(true).multiple(false).origin("175470559285147398").done();
    b.alias("typealias");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUInt() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "UInt", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4282298fL);
    b.class_(false, false, false);
    // extends: Swift.structure.Type
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559281424783");
    b.version(3);
    b.property("bits", 0x26f658b4292cc8fL).type(MetaIdFactory.dataTypeId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4292b53eL)).origin("175470559282515087").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUIntValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "UIntValue", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42815c7aL);
    b.class_(false, false, false);
    // extends: Swift.structure.LiteralValue
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca25L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559281372282");
    b.version(3);
    b.property("value", 0x26f658b42815c7cL).type(PrimitiveTypeId.STRING).origin("175470559281372284").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "UnaryOperator", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbeL);
    b.class_(false, true, false);
    // extends: Swift.structure.Operator
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fbbL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/2928370859060273086");
    b.version(3);
    b.property("position", 0x28a3a9c7f8e49fd3L).type(MetaIdFactory.dataTypeId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8e49fceL)).origin("2928370859060273107").done();
    b.aggregate("operand", 0x28a3a9c7f8e49fcaL).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L).optional(false).ordered(true).multiple(false).origin("2928370859060273098").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "Variable", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9cL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559277325724");
    b.version(3);
    b.property("mutable", 0x26f658b42439da8L).type(PrimitiveTypeId.BOOLEAN).origin("175470559277325736").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariableDecl() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "VariableDecl", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9aL);
    b.class_(false, false, false);
    // extends: Swift.structure.NamedEntityDecl
    b.super_(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8bd7a87L);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dadL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559277325722");
    b.version(3);
    b.alias("var");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariableReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Swift", "VariableReference", 0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39e3L);
    b.class_(false, false, false);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439db2L);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dadL);
    b.parent(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39ceL);
    b.origin("r:f66bab3a-b647-49e3-9e98-90aefd17b024(Swift.structure)/175470559279135203");
    b.version(3);
    b.associate("referenced", 0x26f658b425f39e8L).target(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9cL).optional(false).origin("175470559279135208").done();
    return b.create();
  }
}
