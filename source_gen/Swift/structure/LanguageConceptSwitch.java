package Swift.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AddAssignOp = 0;
  public static final int AddOverflowAssignOp = 1;
  public static final int AdditionOp = 2;
  public static final int Array = 3;
  public static final int ArrayEmpty = 4;
  public static final int ArrayValue = 5;
  public static final int Assignable = 6;
  public static final int AssignmentOp = 7;
  public static final int BinaryOperator = 8;
  public static final int BitwiseAndAssignOp = 9;
  public static final int BitwiseNotOp = 10;
  public static final int BitwiseOrAssignOp = 11;
  public static final int BitwiseXorAssignOp = 12;
  public static final int Bool = 13;
  public static final int BoolValue = 14;
  public static final int CommentMultiLine = 15;
  public static final int CommentMultilineLine = 16;
  public static final int CommentSingleLine = 17;
  public static final int ComparisonOperator = 18;
  public static final int ConstantDecl = 19;
  public static final int DictKeyValue = 20;
  public static final int DictValue = 21;
  public static final int Dictionary = 22;
  public static final int DictionaryEmpty = 23;
  public static final int DictionaryKeyValue = 24;
  public static final int DivideAssignOp = 25;
  public static final int DivisionOp = 26;
  public static final int Double = 27;
  public static final int DoubleValue = 28;
  public static final int EmptyStatement = 29;
  public static final int EqualToOp = 30;
  public static final int Expression = 31;
  public static final int FalseValue = 32;
  public static final int Float = 33;
  public static final int FloatValue = 34;
  public static final int FuncDefinition = 35;
  public static final int FuncParam = 36;
  public static final int Function = 37;
  public static final int GreaterThanOp = 38;
  public static final int GreaterThanOrEqualOp = 39;
  public static final int HalfOpenRangeOp = 40;
  public static final int ImplicitlyUnwrappedOptional = 41;
  public static final int Int = 42;
  public static final int IntValue = 43;
  public static final int InterpolatableString = 44;
  public static final int LeftBitShiftAssignOp = 45;
  public static final int LeftBitShiftIgnoreOverflowAssignOp = 46;
  public static final int LessThanOp = 47;
  public static final int LessThanOrEqualTo = 48;
  public static final int LiteralValue = 49;
  public static final int LogcalAndOp = 50;
  public static final int LogicalNotOp = 51;
  public static final int LogicalOrOp = 52;
  public static final int MinusUnaryOp = 53;
  public static final int Module = 54;
  public static final int MultilineStringValue = 55;
  public static final int MultiplicationOp = 56;
  public static final int MultiplyAssignOp = 57;
  public static final int MultiplyOverflowAssignOp = 58;
  public static final int NameValuePair = 59;
  public static final int NamedEntityDecl = 60;
  public static final int Nil = 61;
  public static final int NilCoalescingOp = 62;
  public static final int NilValue = 63;
  public static final int NotEqualToOp = 64;
  public static final int OneSideRangePostfixOp = 65;
  public static final int OneSidedHalfOpenRange = 66;
  public static final int OneSidedRangeOp = 67;
  public static final int Operator = 68;
  public static final int Optional = 69;
  public static final int PlusUnaryOp = 70;
  public static final int PointwiseBitwiseAndAssignOp = 71;
  public static final int PointwiseBitwiseOrAssignOp = 72;
  public static final int PointwiseBitwiseXorAssignOp = 73;
  public static final int PointwiseLogicalNotOp = 74;
  public static final int RangeOp = 75;
  public static final int RemainderAssignOp = 76;
  public static final int RemainderOp = 77;
  public static final int Return = 78;
  public static final int RightBitShiftAssignOp = 79;
  public static final int RightBitShiftIgnoreOverflowAssignOp = 80;
  public static final int Set = 81;
  public static final int Statement = 82;
  public static final int String = 83;
  public static final int StringInterpolatedExpression = 84;
  public static final int StringRawText = 85;
  public static final int StringValue = 86;
  public static final int Stringable = 87;
  public static final int SubtractAssignOp = 88;
  public static final int SubtractOverflowAssignOp = 89;
  public static final int SubtractionOp = 90;
  public static final int TernaryConditionalOp = 91;
  public static final int TernaryOperator = 92;
  public static final int TrueValue = 93;
  public static final int Tuple = 94;
  public static final int TupleNameVal = 95;
  public static final int TupleValTypes = 96;
  public static final int TupleValue = 97;
  public static final int Typable = 98;
  public static final int Type = 99;
  public static final int TypeAlias = 100;
  public static final int TypealiasDecl = 101;
  public static final int UInt = 102;
  public static final int UIntValue = 103;
  public static final int UnaryOperator = 104;
  public static final int Variable = 105;
  public static final int VariableDecl = 106;
  public static final int VariableReference = 107;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xfe2099137e444724L, 0xa9e768530fec997cL);
    builder.put(0x28a3a9c7f8f0453aL, AddAssignOp);
    builder.put(0x28a3a9c7f8f04558L, AddOverflowAssignOp);
    builder.put(0x28a3a9c7f8eff1c9L, AdditionOp);
    builder.put(0x28a3a9c7f94ef200L, Array);
    builder.put(0x28a3a9c7f96bb6eaL, ArrayEmpty);
    builder.put(0x28a3a9c7f9625c0aL, ArrayValue);
    builder.put(0x26f658b425f39ceL, Assignable);
    builder.put(0x26f658b425f39caL, AssignmentOp);
    builder.put(0x28a3a9c7f8e49fbcL, BinaryOperator);
    builder.put(0x28a3a9c7f8f04548L, BitwiseAndAssignOp);
    builder.put(0x28a3a9c7f932436eL, BitwiseNotOp);
    builder.put(0x28a3a9c7f8f0454cL, BitwiseOrAssignOp);
    builder.put(0x28a3a9c7f8f0454fL, BitwiseXorAssignOp);
    builder.put(0x26f658b42c091d9L, Bool);
    builder.put(0x26f658b42c3e42dL, BoolValue);
    builder.put(0x26f658b427c2d3cL, CommentMultiLine);
    builder.put(0x26f658b427c2d63L, CommentMultilineLine);
    builder.put(0x26f658b427c2c6dL, CommentSingleLine);
    builder.put(0x28a3a9c7f8f41cf7L, ComparisonOperator);
    builder.put(0x26f658b42439d9bL, ConstantDecl);
    builder.put(0x28a3a9c7f965b9e7L, DictKeyValue);
    builder.put(0x28a3a9c7f965b9e6L, DictValue);
    builder.put(0x28a3a9c7f95f01b9L, Dictionary);
    builder.put(0x28a3a9c7f9705718L, DictionaryEmpty);
    builder.put(0x28a3a9c7f9726f00L, DictionaryKeyValue);
    builder.put(0x28a3a9c7f8f04535L, DivideAssignOp);
    builder.put(0x28a3a9c7f8eff5c2L, DivisionOp);
    builder.put(0x26f658b42a73dc2L, Double);
    builder.put(0x26f658b42a73dc5L, DoubleValue);
    builder.put(0x26f658b42439dbaL, EmptyStatement);
    builder.put(0x28a3a9c7f8f41cfcL, EqualToOp);
    builder.put(0x26f658b42439db2L, Expression);
    builder.put(0x26f658b42c10f35L, FalseValue);
    builder.put(0x26f658b4275d3f0L, Float);
    builder.put(0x26f658b4275d3c4L, FloatValue);
    builder.put(0x28a3a9c7f976d329L, FuncDefinition);
    builder.put(0x28a3a9c7f976d333L, FuncParam);
    builder.put(0x28a3a9c7f976cd00L, Function);
    builder.put(0x28a3a9c7f8f41d06L, GreaterThanOp);
    builder.put(0x28a3a9c7f8f41d0cL, GreaterThanOrEqualOp);
    builder.put(0x28a3a9c7f8fa1bfcL, HalfOpenRangeOp);
    builder.put(0x28a3a9c7f8cf4ac0L, ImplicitlyUnwrappedOptional);
    builder.put(0x26f658b4258f858L, Int);
    builder.put(0x26f658b4275d3b1L, IntValue);
    builder.put(0x28a3a9c7f90e8676L, InterpolatableString);
    builder.put(0x28a3a9c7f8f0453fL, LeftBitShiftAssignOp);
    builder.put(0x28a3a9c7f8f04560L, LeftBitShiftIgnoreOverflowAssignOp);
    builder.put(0x28a3a9c7f8f41d09L, LessThanOp);
    builder.put(0x28a3a9c7f8f41d10L, LessThanOrEqualTo);
    builder.put(0x26f658b4268ca25L, LiteralValue);
    builder.put(0x28a3a9c7f8fe1836L, LogcalAndOp);
    builder.put(0x28a3a9c7f9321f35L, LogicalNotOp);
    builder.put(0x28a3a9c7f8fe1838L, LogicalOrOp);
    builder.put(0x28a3a9c7f8eff5c6L, MinusUnaryOp);
    builder.put(0x26f658b42439dabL, Module);
    builder.put(0x28a3a9c7f8fe6771L, MultilineStringValue);
    builder.put(0x28a3a9c7f8eff5bcL, MultiplicationOp);
    builder.put(0x28a3a9c7f8f04531L, MultiplyAssignOp);
    builder.put(0x28a3a9c7f8f04553L, MultiplyOverflowAssignOp);
    builder.put(0x26f658b42ce3c87L, NameValuePair);
    builder.put(0x28a3a9c7f8bd7a87L, NamedEntityDecl);
    builder.put(0x26f658b42e28536L, Nil);
    builder.put(0x28a3a9c7f8f9f86bL, NilCoalescingOp);
    builder.put(0x26f658b42da5abaL, NilValue);
    builder.put(0x28a3a9c7f8f41d03L, NotEqualToOp);
    builder.put(0x28a3a9c7f9324551L, OneSideRangePostfixOp);
    builder.put(0x28a3a9c7f8fdc709L, OneSidedHalfOpenRange);
    builder.put(0x28a3a9c7f8fda3dcL, OneSidedRangeOp);
    builder.put(0x28a3a9c7f8e49fbbL, Operator);
    builder.put(0x26f658b42d47ee8L, Optional);
    builder.put(0x28a3a9c7f8f02061L, PlusUnaryOp);
    builder.put(0x28a3a9c7f8f04567L, PointwiseBitwiseAndAssignOp);
    builder.put(0x28a3a9c7f8f0456dL, PointwiseBitwiseOrAssignOp);
    builder.put(0x28a3a9c7f8f04572L, PointwiseBitwiseXorAssignOp);
    builder.put(0x28a3a9c7f93241b4L, PointwiseLogicalNotOp);
    builder.put(0x28a3a9c7f8fa0798L, RangeOp);
    builder.put(0x28a3a9c7f8f04537L, RemainderAssignOp);
    builder.put(0x28a3a9c7f8eff5c4L, RemainderOp);
    builder.put(0x28a3a9c7f98dbbf3L, Return);
    builder.put(0x28a3a9c7f8f04543L, RightBitShiftAssignOp);
    builder.put(0x28a3a9c7f8f04563L, RightBitShiftIgnoreOverflowAssignOp);
    builder.put(0x28a3a9c7f95b36a8L, Set);
    builder.put(0x26f658b42439dadL, Statement);
    builder.put(0x26f658b425ed31cL, String);
    builder.put(0x28a3a9c7f91dae5bL, StringInterpolatedExpression);
    builder.put(0x28a3a9c7f90160e4L, StringRawText);
    builder.put(0x26f658b4268ca21L, StringValue);
    builder.put(0x28a3a9c7f90160e7L, Stringable);
    builder.put(0x28a3a9c7f8f0453cL, SubtractAssignOp);
    builder.put(0x28a3a9c7f8f0455cL, SubtractOverflowAssignOp);
    builder.put(0x28a3a9c7f8eff5b6L, SubtractionOp);
    builder.put(0x28a3a9c7f8f43634L, TernaryConditionalOp);
    builder.put(0x28a3a9c7f8e49fbfL, TernaryOperator);
    builder.put(0x26f658b42c101a7L, TrueValue);
    builder.put(0x26f658b42c47863L, Tuple);
    builder.put(0x28a3a9c7f99b8116L, TupleNameVal);
    builder.put(0x28a3a9c7f99b8a36L, TupleValTypes);
    builder.put(0x26f658b42c47e49L, TupleValue);
    builder.put(0x26f658b4258f859L, Typable);
    builder.put(0x26f658b4258f878L, Type);
    builder.put(0x26f658b42b4e3b4L, TypeAlias);
    builder.put(0x26f658b42baf701L, TypealiasDecl);
    builder.put(0x26f658b4282298fL, UInt);
    builder.put(0x26f658b42815c7aL, UIntValue);
    builder.put(0x28a3a9c7f8e49fbeL, UnaryOperator);
    builder.put(0x26f658b42439d9cL, Variable);
    builder.put(0x26f658b42439d9aL, VariableDecl);
    builder.put(0x26f658b425f39e3L, VariableReference);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
