package Swift.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Assignable = 0;
  public static final int Assignment = 1;
  public static final int Bool = 2;
  public static final int BoolValue = 3;
  public static final int CommentMultiLine = 4;
  public static final int CommentMultilineLine = 5;
  public static final int CommentSingleLine = 6;
  public static final int ConstantDecl = 7;
  public static final int Double = 8;
  public static final int DoubleValue = 9;
  public static final int EmptyStatement = 10;
  public static final int Expression = 11;
  public static final int FalseValue = 12;
  public static final int Float = 13;
  public static final int FloatValue = 14;
  public static final int ImplicitlyUnwrappedOptional = 15;
  public static final int Int = 16;
  public static final int IntValue = 17;
  public static final int LiteralValue = 18;
  public static final int Module = 19;
  public static final int NameValuePair = 20;
  public static final int NamedEntityDecl = 21;
  public static final int Nil = 22;
  public static final int NilValue = 23;
  public static final int Optional = 24;
  public static final int Statement = 25;
  public static final int String = 26;
  public static final int StringValue = 27;
  public static final int TrueValue = 28;
  public static final int Tuple = 29;
  public static final int TupleValue = 30;
  public static final int Typable = 31;
  public static final int Type = 32;
  public static final int TypeAlias = 33;
  public static final int TypealiasDecl = 34;
  public static final int UInt = 35;
  public static final int UIntValue = 36;
  public static final int Variable = 37;
  public static final int VariableDecl = 38;
  public static final int VariableReference = 39;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xfe2099137e444724L, 0xa9e768530fec997cL);
    builder.put(0x26f658b425f39ceL, Assignable);
    builder.put(0x26f658b425f39caL, Assignment);
    builder.put(0x26f658b42c091d9L, Bool);
    builder.put(0x26f658b42c3e42dL, BoolValue);
    builder.put(0x26f658b427c2d3cL, CommentMultiLine);
    builder.put(0x26f658b427c2d63L, CommentMultilineLine);
    builder.put(0x26f658b427c2c6dL, CommentSingleLine);
    builder.put(0x26f658b42439d9bL, ConstantDecl);
    builder.put(0x26f658b42a73dc2L, Double);
    builder.put(0x26f658b42a73dc5L, DoubleValue);
    builder.put(0x26f658b42439dbaL, EmptyStatement);
    builder.put(0x26f658b42439db2L, Expression);
    builder.put(0x26f658b42c10f35L, FalseValue);
    builder.put(0x26f658b4275d3f0L, Float);
    builder.put(0x26f658b4275d3c4L, FloatValue);
    builder.put(0x28a3a9c7f8cf4ac0L, ImplicitlyUnwrappedOptional);
    builder.put(0x26f658b4258f858L, Int);
    builder.put(0x26f658b4275d3b1L, IntValue);
    builder.put(0x26f658b4268ca25L, LiteralValue);
    builder.put(0x26f658b42439dabL, Module);
    builder.put(0x26f658b42ce3c87L, NameValuePair);
    builder.put(0x28a3a9c7f8bd7a87L, NamedEntityDecl);
    builder.put(0x26f658b42e28536L, Nil);
    builder.put(0x26f658b42da5abaL, NilValue);
    builder.put(0x26f658b42d47ee8L, Optional);
    builder.put(0x26f658b42439dadL, Statement);
    builder.put(0x26f658b425ed31cL, String);
    builder.put(0x26f658b4268ca21L, StringValue);
    builder.put(0x26f658b42c101a7L, TrueValue);
    builder.put(0x26f658b42c47863L, Tuple);
    builder.put(0x26f658b42c47e49L, TupleValue);
    builder.put(0x26f658b4258f859L, Typable);
    builder.put(0x26f658b4258f878L, Type);
    builder.put(0x26f658b42b4e3b4L, TypeAlias);
    builder.put(0x26f658b42baf701L, TypealiasDecl);
    builder.put(0x26f658b4282298fL, UInt);
    builder.put(0x26f658b42815c7aL, UIntValue);
    builder.put(0x26f658b42439d9cL, Variable);
    builder.put(0x26f658b42439d9aL, VariableDecl);
    builder.put(0x26f658b425f39e3L, VariableReference);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
