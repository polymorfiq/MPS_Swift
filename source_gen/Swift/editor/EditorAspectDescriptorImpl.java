package Swift.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Assignment_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new CommentMultiLine_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new CommentMultilineLine_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new CommentSingleLine_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ConstantDecl_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new DoubleValue_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new EmptyStatement_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new FalseValue_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new FloatValue_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ImplicitlyUnwrappedOptional_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Int_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new IntValue_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Module_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new NameValuePair_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new NilValue_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Optional_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new StringValue_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new TrueValue_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new Tuple_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new TupleValue_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Type_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new TypealiasDecl_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new UInt_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new UIntValue_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new Variable_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new VariableDecl_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new VariableReference_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new IntValueToDouble());
      case 1:
        return Collections.<TransformationMenu>singletonList(new TypeDeclarationHelpers());
      case 2:
        return Collections.<TransformationMenu>singletonList(new TypeToOptional());
      case 3:
        return Collections.<TransformationMenu>singletonList(new UIntValueToDouble());
      case 4:
        return Collections.<TransformationMenu>singletonList(new Variable_Transforms());
      case 5:
        return Collections.<TransformationMenu>singletonList(new VariableReference_Transforms());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new VariableReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39caL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b427c2d3cL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b427c2d63L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b427c2c6dL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9bL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42a73dc5L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dbaL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c10f35L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4275d3c4L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x28a3a9c7f8cf4ac0L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f858L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4275d3b1L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439dabL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42ce3c87L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42da5abaL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42d47ee8L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4268ca21L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c101a7L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c47863L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42c47e49L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42baf701L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4282298fL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42815c7aL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9cL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9aL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39e3L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4275d3b1L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f859L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f878L), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42815c7aL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b42439d9cL), MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39e3L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b425f39e3L)).seal();
}
