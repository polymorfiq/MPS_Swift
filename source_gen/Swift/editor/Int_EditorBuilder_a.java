package Swift.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import Swift.editor.SwiftMain_StyleSheet.typeStyleClass;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.EmptyCellAction;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SProperty;

/*package*/ class Int_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Int_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_jlhyim_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createConstant_0());
    editorCell.addEditorCell(createModelAccess_0());
    return editorCell;
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Int");
    editorCell.setCellId("Constant_jlhyim_a0");
    Style style = new StyleImpl();
    new typeStyleClass(this).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createModelAccess_0() {
    ModelAccessor modelAccessor = new ModelAccessor() {
      public String getText() {
        switch (enumSwitchIndex.indexNullable(SPropertyOperations.getEnum(myNode, PROPS.bits$ZgeA))) {
          case 0:
            return "8";
          case 1:
            return "16";
          case 2:
            return "32";
          case 3:
            return "64";
          case 4:
            return "";
          default:
            return null;
        }
      }
      public void setText(String text) {
        if (text == "") {
          SPropertyOperations.assignEnum(myNode, PROPS.bits$ZgeA, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4292b53eL, "Swift.structure.IntSize"), 0x26f658b4292b54cL, "bits_unspecified"));
        } else if (text == "8") {
          SPropertyOperations.assignEnum(myNode, PROPS.bits$ZgeA, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4292b53eL, "Swift.structure.IntSize"), 0x26f658b4292b53fL, "bits_8"));
        } else if (text == "16") {
          SPropertyOperations.assignEnum(myNode, PROPS.bits$ZgeA, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4292b53eL, "Swift.structure.IntSize"), 0x26f658b4292b540L, "bits_16"));
        } else if (text == "32") {
          SPropertyOperations.assignEnum(myNode, PROPS.bits$ZgeA, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4292b53eL, "Swift.structure.IntSize"), 0x26f658b4292b543L, "bits_32"));
        } else if (text == "64") {
          SPropertyOperations.assignEnum(myNode, PROPS.bits$ZgeA, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4292b53eL, "Swift.structure.IntSize"), 0x26f658b4292b547L, "bits_64"));
        }
      }
      public boolean isValidText(String text) {
        if (text == "") {
          return true;
        } else if (text == "8") {
          return true;
        } else if (text == "16") {
          return true;
        } else if (text == "32") {
          return true;
        } else if (text == "64") {
          return true;
        }
        return false;
      }
    };
    EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), modelAccessor, myNode);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
    editorCell.setCellId("ModelAccess_jlhyim_b0");
    Style style = new StyleImpl();
    new typeStyleClass(this).apply(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private static final EnumerationLiteralsIndex enumSwitchIndex = EnumerationLiteralsIndex.build(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4292b53eL, 0x26f658b4292b53fL, 0x26f658b4292b540L, 0x26f658b4292b543L, 0x26f658b4292b547L, 0x26f658b4292b54cL);

  private static final class PROPS {
    /*package*/ static final SProperty bits$ZgeA = MetaAdapterFactory.getProperty(0xfe2099137e444724L, 0xa9e768530fec997cL, 0x26f658b4258f858L, 0x26f658b429450eaL, "bits");
  }
}
