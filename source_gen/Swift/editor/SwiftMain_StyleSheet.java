package Swift.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.style.AbstractStyleClass;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.editor.runtime.descriptor.EditorBuilderEnvironment;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSColors;

public class SwiftMain_StyleSheet {
  public static class declarationStyleClass extends AbstractStyleClass {
    public declarationStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public declarationStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.orange));
    }

  }
  public static class variableStyleClass extends AbstractStyleClass {
    public variableStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public variableStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.blue));
    }

  }
  public static class typeStyleClass extends AbstractStyleClass {
    public typeStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public typeStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.LIGHT_BLUE));
    }

  }
  public static class commentStyleClass extends AbstractStyleClass {
    public commentStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public commentStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.gray));
    }

  }
}
